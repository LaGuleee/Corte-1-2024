#include <iostream>

// Definición de la estructura del nodo
struct Node {
    int data;
    Node* next;
    Node* prev;
};

// Clase para la lista doblemente enlazada y circular
class DoublyLinkedList {
private:
    Node* head;
public:
    // Constructor
    DoublyLinkedList() : head(nullptr) {}

    // Método para insertar un nodo al final de la lista
    void insert(int value) {
        Node* newNode = new Node();
        newNode->data = value;
        newNode->next = nullptr;

        if (head == nullptr) {
            head = newNode;
            head->next = head;
            head->prev = head;
        } else {
            Node* last = head->prev;
            last->next = newNode;
            newNode->prev = last;
            newNode->next = head;
            head->prev = newNode;
        }
    }

    // Método para sumar todos los componentes de la lista, encontrar máximo y mínimo
    void sumMaxMin() {
        if (head == nullptr) {
            std::cout << "La lista está vacía." << std::endl;
            return;
        }

        Node* current = head;
        int sum = 0;
        int max = head->data;
        int min = head->data;

        do {
            sum += current->data;

            if (current->data > max) {
                max = current->data;
            }

            if (current->data < min) {
                min = current->data;
            }

            current = current->next;
        } while (current != head);

        std::cout << "Suma de todos los componentes: " << sum << std::endl;
        std::cout << "Máximo valor de la lista: " << max << std::endl;
        std::cout << "Mínimo valor de la lista: " << min << std::endl;
    }
};

int main() {
    DoublyLinkedList list;

    // Insertar elementos en la lista
    list.insert(5);
    list.insert(10);
    list.insert(3);
    list.insert(8);
    list.insert(1);

    // Calcular suma, máximo y mínimo
    list.sumMaxMin();

    return 0;
}
